import React from 'react';
import { motion } from 'framer-motion';
import ContentCard from '../components/Content/ContentCard';
import QuoteBox from '../components/Content/QuoteBox';
import StatisticsChart from '../components/Content/StatisticsChart';
import Quiz from '../components/Interactive/Quiz';
import NoteTaking from '../components/Interactive/NoteTaking';
import MainContentSidebar from '../components/Layout/MainContentSidebar';
import { contentData } from '../data/content';
import { quizData } from '../data/quiz';
import { FiTrendingUp, FiUsers, FiHeart, FiAward, FiTarget, FiCheckCircle } from 'react-icons/fi';

const PracticalApplication = () => {
  const data = contentData.thucTienVietNam;

  // Filter quiz questions related to practical application
  const practicalQuiz = quizData.filter(q =>
    q.question.includes('th·ª±c ti·ªÖn') ||
    q.question.includes('Vi·ªát Nam') ||
    q.question.includes('h√≤a h·ª£p')
  );

  // Chart data for religion distribution
  const religionDistributionData = {
    labels: ['Ph·∫≠t gi√°o', 'C√¥ng gi√°o', 'Tin L√†nh', 'Cao ƒê√†i', 'H√≤a H·∫£o', 'H·ªìi gi√°o', 'Kh√°c'],
    datasets: [
      {
        label: 'S·ªë l∆∞·ª£ng t√≠n ƒë·ªì (tri·ªáu ng∆∞·ªùi)',
        data: [14.9, 7.0, 1.4, 1.3, 1.2, 0.1, 0.1],
        backgroundColor: [
          'rgba(59, 130, 246, 0.8)',
          'rgba(16, 185, 129, 0.8)',
          'rgba(245, 158, 11, 0.8)',
          'rgba(239, 68, 68, 0.8)',
          'rgba(139, 92, 246, 0.8)',
          'rgba(34, 197, 94, 0.8)',
          'rgba(156, 163, 175, 0.8)'
        ],
        borderColor: [
          'rgba(59, 130, 246, 1)',
          'rgba(16, 185, 129, 1)',
          'rgba(245, 158, 11, 1)',
          'rgba(239, 68, 68, 1)',
          'rgba(139, 92, 246, 1)',
          'rgba(34, 197, 94, 1)',
          'rgba(156, 163, 175, 1)'
        ],
        borderWidth: 2
      }
    ]
  };

  // Chart data for social contributions
  const socialContributionsData = {
    labels: ['T·ª´ thi·ªán', 'Gi√°o d·ª•c', 'Y t·∫ø', 'M√¥i tr∆∞·ªùng', 'VƒÉn h√≥a', 'X√£ h·ªôi'],
    datasets: [
      {
        label: 'M·ª©c ƒë·ªô ƒë√≥ng g√≥p (%)',
        data: [90, 85, 80, 75, 70, 85],
        backgroundColor: 'rgba(59, 130, 246, 0.8)',
        borderColor: 'rgba(59, 130, 246, 1)',
        borderWidth: 2
      }
    ]
  };

  const achievements = [
    {
      title: "·ªîn ƒë·ªãnh ch√≠nh tr·ªã - x√£ h·ªôi",
      description: "Ho·∫°t ƒë·ªông t√¥n gi√°o ·ªïn ƒë·ªãnh, quan h·ªá h√†i h√≤a gi·ªØa c√°c t√¥n gi√°o v·ªõi Nh√† n∆∞·ªõc",
      icon: FiCheckCircle,
      color: "bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300",
      details: [
        "Kh√¥ng c√≥ xung ƒë·ªôt t√¥n gi√°o l·ªõn",
        "C√°c t√¥n gi√°o tu√¢n th·ªß ph√°p lu·∫≠t",
        "Quan h·ªá t·ªët ƒë·∫πp v·ªõi ch√≠nh quy·ªÅn",
        "ƒê√≥ng g√≥p t√≠ch c·ª±c v√†o ph√°t tri·ªÉn ƒë·∫•t n∆∞·ªõc"
      ]
    },
    {
      title: "Phong tr√†o x√£ h·ªôi t√≠ch c·ª±c",
      description: "C√°c phong tr√†o 'S·ªëng t·ªët ƒë·ªùi ƒë·∫πp ƒë·∫°o', 'To√†n d√¢n ƒëo√†n k·∫øt x√¢y d·ª±ng ƒë·ªùi s·ªëng vƒÉn h√≥a'",
      icon: FiUsers,
      color: "bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300",
      details: [
        "S·ªëng t·ªët ƒë·ªùi ƒë·∫πp ƒë·∫°o",
        "To√†n d√¢n ƒëo√†n k·∫øt x√¢y d·ª±ng ƒë·ªùi s·ªëng vƒÉn h√≥a ·ªü khu d√¢n c∆∞",
        "X√¢y d·ª±ng n√¥ng th√¥n m·ªõi",
        "B·∫£o v·ªá m√¥i tr∆∞·ªùng"
      ]
    },
    {
      title: "ƒê√≥ng g√≥p t·ª´ thi·ªán l·ªõn",
      description: "X√¢y c·∫ßu ƒë∆∞·ªùng, nh√† t√¨nh th∆∞∆°ng, chƒÉm s√≥c tr·∫ª m·ªì c√¥i, h·ªó tr·ª£ ch·ªëng d·ªãch COVID-19",
      icon: FiHeart,
      color: "bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300",
      details: [
        "X√¢y d·ª±ng c∆° s·ªü h·∫° t·∫ßng",
        "H·ªó tr·ª£ ng∆∞·ªùi ngh√®o, tr·∫ª m·ªì c√¥i",
        "ChƒÉm s√≥c ng∆∞·ªùi gi√†, ng∆∞·ªùi khuy·∫øt t·∫≠t",
        "H·ªó tr·ª£ ch·ªëng d·ªãch COVID-19"
      ]
    }
  ];

  const specificExamples = [
    {
      organization: "Gi√°o h·ªôi Ph·∫≠t gi√°o Vi·ªát Nam",
      activities: [
        "T·ªï ch·ª©c 'B·∫øp ƒÉn t·ª´ thi·ªán' cho b·ªánh vi·ªán",
        "X√¢y d·ª±ng nh√† t√¨nh th∆∞∆°ng cho ng∆∞·ªùi ngh√®o",
        "H·ªó tr·ª£ gi√°o d·ª•c cho tr·∫ª em v√πng s√¢u v√πng xa",
        "Tham gia b·∫£o v·ªá m√¥i tr∆∞·ªùng"
      ],
      impact: "H√†ng tri·ªáu ng∆∞·ªùi ƒë∆∞·ª£c h·ªó tr·ª£ m·ªói nƒÉm"
    },
    {
      organization: "Gi√°o h·ªôi C√¥ng gi√°o Vi·ªát Nam",
      activities: [
        "ChƒÉm s√≥c ng∆∞·ªùi gi√†, ng∆∞·ªùi khuy·∫øt t·∫≠t",
        "H·ªó tr·ª£ gi√°o d·ª•c v√† y t·∫ø",
        "Tham gia x√¢y d·ª±ng n√¥ng th√¥n m·ªõi",
        "ƒê√≥ng g√≥p v√†o ph√°t tri·ªÉn kinh t·∫ø - x√£ h·ªôi"
      ],
      impact: "ƒê√≥ng g√≥p t√≠ch c·ª±c v√†o ph√°t tri·ªÉn ƒë·∫•t n∆∞·ªõc"
    },
    {
      organization: "C√°c t·ªï ch·ª©c t√¥n gi√°o kh√°c",
      activities: [
        "Cao ƒê√†i: Tham gia ho·∫°t ƒë·ªông t·ª´ thi·ªán",
        "H√≤a H·∫£o: H·ªó tr·ª£ n√¥ng d√¢n ph√°t tri·ªÉn s·∫£n xu·∫•t",
        "Tin L√†nh: Tham gia gi√°o d·ª•c v√† y t·∫ø",
        "H·ªìi gi√°o: G√≥p ph·∫ßn ƒëa d·∫°ng vƒÉn h√≥a"
      ],
      impact: "T·∫°o n√™n s·ª± ƒëa d·∫°ng v√† phong ph√∫ trong x√£ h·ªôi"
    }
  ];

  const challenges = [
    {
      challenge: "C√¢n b·∫±ng gi·ªØa t·ª± do v√† qu·∫£n l√Ω",
      description: "V·ª´a ƒë·∫£m b·∫£o t·ª± do t√≠n ng∆∞·ª°ng v·ª´a qu·∫£n l√Ω ch·∫∑t ch·∫Ω",
      solution: "X√¢y d·ª±ng khung ph√°p l√Ω r√µ r√†ng, minh b·∫°ch"
    },
    {
      challenge: "ƒêa d·∫°ng t√¥n gi√°o",
      description: "M·ªói t√¥n gi√°o c√≥ ƒë·∫∑c ƒëi·ªÉm v√† nhu c·∫ßu kh√°c nhau",
      solution: "C√≥ ch√≠nh s√°ch linh ho·∫°t, ph√π h·ª£p t·ª´ng t√¥n gi√°o"
    },
    {
      challenge: "√Åp l·ª±c t·ª´ b√™n ngo√†i",
      description: "M·ªôt s·ªë th·∫ø l·ª±c l·ª£i d·ª•ng t√¥n gi√°o ch·ªëng ph√°",
      solution: "TƒÉng c∆∞·ªùng c·∫£nh gi√°c v√† ƒë·∫•u tranh ch√≠nh tr·ªã"
    },
    {
      challenge: "Ph√°t tri·ªÉn kinh t·∫ø - x√£ h·ªôi",
      description: "C·∫ßn ph√°t tri·ªÉn ƒë·ªÉ gi·∫£m nhu c·∫ßu t√¥n gi√°o",
      solution: "∆Øu ti√™n ph√°t tri·ªÉn gi√°o d·ª•c, y t·∫ø, x√≥a ƒë√≥i gi·∫£m ngh√®o"
    }
  ];

  const futureDirections = [
    {
      direction: "Ho√†n thi·ªán ph√°p lu·∫≠t",
      description: "S·ª≠a ƒë·ªïi, b·ªï sung Lu·∫≠t T√≠n ng∆∞·ª°ng, T√¥n gi√°o",
      priority: "Cao",
      timeline: "2024-2025"
    },
    {
      direction: "N√¢ng cao nh·∫≠n th·ª©c",
      description: "Gi√°o d·ª•c quy·ªÅn t·ª± do t√≠n ng∆∞·ª°ng, t√¥n tr·ªçng s·ª± kh√°c bi·ªát",
      priority: "Cao",
      timeline: "Li√™n t·ª•c"
    },
    {
      direction: "Ph√°t huy vai tr√≤ t√≠ch c·ª±c",
      description: "Khuy·∫øn kh√≠ch tham gia b·∫£o v·ªá m√¥i tr∆∞·ªùng, h·ªó tr·ª£ ng∆∞·ªùi ngh√®o",
      priority: "Trung b√¨nh",
      timeline: "2024-2030"
    },
    {
      direction: "ƒê·∫•u tranh v·ªõi l·ª£i d·ª•ng",
      description: "X·ª≠ l√Ω nghi√™m c√°c h√†nh vi l·ª£i d·ª•ng t√¥n gi√°o",
      priority: "Cao",
      timeline: "Li√™n t·ª•c"
    }
  ];

  return (
    <div className="min-h-screen flex">
      {/* Fixed Sidebar */}
      <div className="hidden lg:block w-80 bg-white dark:bg-gray-800 shadow-lg fixed left-0 top-0 h-screen overflow-y-auto z-10">
        <div className="p-6 pb-20">
          <MainContentSidebar
            title="N·ªôi dung ch∆∞∆°ng"
            showProgress={false}
            showStats={false}
          />
        </div>
      </div>

      {/* Main Content Area */}
      <div className="flex-1 lg:ml-80">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
          {/* Header */}
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center mb-12"
          >
            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6">
              {data.title}
            </h1>
            <p className="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto leading-relaxed">
              Th·ª±c ti·ªÖn h√≤a h·ª£p t√¥n gi√°o trong x√£ h·ªôi Vi·ªát Nam hi·ªán nay cho th·∫•y
              s·ª± th√†nh c√¥ng trong vi·ªác √°p d·ª•ng quan ƒëi·ªÉm M√°c-L√™nin v√†o ƒëi·ªÅu ki·ªán c·ª• th·ªÉ
            </p>
          </motion.div>

          {/* Statistics Overview */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="mb-16"
          >
            <ContentCard
              title="Th·ªëng k√™ t·ªïng quan"
              icon="üìä"
              pageId="practical-statistics"
            >
              <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
                <div className="text-center">
                  <div className="text-3xl font-bold text-blue-600 dark:text-blue-400 mb-2">
                    {data.statistics.totalOrganizations}
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    T·ªï ch·ª©c t√¥n gi√°o
                  </div>
                </div>
                <div className="text-center">
                  <div className="text-3xl font-bold text-green-600 dark:text-green-400 mb-2">
                    {data.statistics.totalReligions}
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    T√¥n gi√°o
                  </div>
                </div>
                <div className="text-center">
                  <div className="text-3xl font-bold text-purple-600 dark:text-purple-400 mb-2">
                    {data.statistics.totalBelievers}
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    Tri·ªáu t√≠n ƒë·ªì
                  </div>
                </div>
                <div className="text-center">
                  <div className="text-3xl font-bold text-orange-600 dark:text-orange-400 mb-2">
                    {data.statistics.percentage}%
                  </div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">
                    D√¢n s·ªë c√≥ t√≠n ng∆∞·ª°ng
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <StatisticsChart
                  data={religionDistributionData}
                  type="doughnut"
                  title="Ph√¢n b·ªë t√≠n ƒë·ªì theo t√¥n gi√°o"
                  delay={0.2}
                />
                <StatisticsChart
                  data={socialContributionsData}
                  type="bar"
                  title="ƒê√≥ng g√≥p x√£ h·ªôi c·ªßa t√¥n gi√°o"
                  delay={0.4}
                />
              </div>
            </ContentCard>
          </motion.div>

          {/* Achievements */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="mb-16"
          >
            <ContentCard
              title="Th√†nh t·ª±u ƒë·∫°t ƒë∆∞·ª£c"
              icon="üèÜ"
              pageId="practical-achievements"
            >
              <div className="space-y-6">
                {achievements.map((achievement, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: 0.4 + (index * 0.1) }}
                    className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm"
                  >
                    <div className="flex items-start space-x-4 mb-4">
                      <div className={`w-12 h-12 ${achievement.color} rounded-lg flex items-center justify-center flex-shrink-0`}>
                        <achievement.icon size={24} />
                      </div>
                      <div className="flex-1">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                          {achievement.title}
                        </h3>
                        <p className="text-gray-700 dark:text-gray-300 mb-3">
                          {achievement.description}
                        </p>
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {achievement.details.map((detail, detailIndex) => (
                        <div key={detailIndex} className="flex items-start">
                          <span className="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                          <span className="text-sm text-gray-700 dark:text-gray-300">{detail}</span>
                        </div>
                      ))}
                    </div>
                  </motion.div>
                ))}
              </div>
            </ContentCard>
          </motion.div>

          {/* Specific Examples */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.4 }}
            className="mb-16"
          >
            <ContentCard
              title="V√≠ d·ª• c·ª• th·ªÉ"
              icon="üåç"
              pageId="practical-examples"
            >
              <div className="space-y-6">
                {specificExamples.map((example, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.6, delay: 0.6 + (index * 0.1) }}
                    className="bg-gray-50 dark:bg-gray-700 rounded-lg p-6"
                  >
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">
                      {example.organization}
                    </h3>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <h4 className="font-medium text-gray-900 dark:text-white mb-2">
                          Ho·∫°t ƒë·ªông ch√≠nh:
                        </h4>
                        <ul className="space-y-1">
                          {example.activities.map((activity, actIndex) => (
                            <li key={actIndex} className="text-sm text-gray-700 dark:text-gray-300 flex items-start">
                              <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                              {activity}
                            </li>
                          ))}
                        </ul>
                      </div>

                      <div className="bg-blue-50 dark:bg-blue-900/20 rounded p-3">
                        <h4 className="font-medium text-blue-800 dark:text-blue-300 mb-1">
                          T√°c ƒë·ªông:
                        </h4>
                        <p className="text-sm text-blue-700 dark:text-blue-300">
                          {example.impact}
                        </p>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>
            </ContentCard>
          </motion.div>

          {/* Examples from content data */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.6 }}
            className="mb-16"
          >
            <ContentCard
              title="C√°c v√≠ d·ª• th·ª±c ti·ªÖn"
              icon="üí°"
              pageId="practical-content-examples"
              images={data.images}
            >
              <div className="space-y-4">
                {data.examples.map((example, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: 0.8 + (index * 0.1) }}
                    className="bg-green-50 dark:bg-green-900/20 rounded-lg p-4"
                  >
                    <div className="flex items-start space-x-3">
                      <FiCheckCircle className="text-green-600 dark:text-green-400 mt-1" size={16} />
                      <p className="text-gray-700 dark:text-gray-300">{example}</p>
                    </div>
                  </motion.div>
                ))}
              </div>
            </ContentCard>
          </motion.div>

          {/* Challenges */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.8 }}
            className="mb-16"
          >
            <ContentCard
              title="Th√°ch th·ª©c hi·ªán t·∫°i"
              icon="‚ö†Ô∏è"
              pageId="practical-challenges"
            >
              <div className="space-y-6">
                {challenges.map((challenge, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: 1.0 + (index * 0.1) }}
                    className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm"
                  >
                    <h3 className="font-semibold text-gray-900 dark:text-white mb-2">
                      {challenge.challenge}
                    </h3>
                    <p className="text-gray-700 dark:text-gray-300 mb-3">
                      {challenge.description}
                    </p>
                    <div className="bg-blue-50 dark:bg-blue-900/20 rounded p-3">
                      <p className="text-sm text-blue-700 dark:text-blue-300">
                        <strong>Gi·∫£i ph√°p:</strong> {challenge.solution}
                      </p>
                    </div>
                  </motion.div>
                ))}
              </div>
            </ContentCard>
          </motion.div>

          {/* Future Directions */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 1.0 }}
            className="mb-16"
          >
            <ContentCard
              title="ƒê·ªãnh h∆∞·ªõng t∆∞∆°ng lai"
              icon="üöÄ"
              pageId="practical-future"
            >
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {futureDirections.map((direction, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: 1.2 + (index * 0.1) }}
                    className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm"
                  >
                    <div className="flex items-start justify-between mb-3">
                      <h3 className="font-semibold text-gray-900 dark:text-white">
                        {direction.direction}
                      </h3>
                      <div className="flex items-center space-x-2">
                        <span className={`text-xs px-2 py-1 rounded ${direction.priority === 'Cao' ? 'bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300' :
                          direction.priority === 'Trung b√¨nh' ? 'bg-yellow-100 dark:bg-yellow-900 text-yellow-700 dark:text-yellow-300' :
                            'bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300'
                          }`}>
                          {direction.priority}
                        </span>
                      </div>
                    </div>
                    <p className="text-gray-700 dark:text-gray-300 mb-3">
                      {direction.description}
                    </p>
                    <div className="text-sm text-gray-500 dark:text-gray-400">
                      <strong>Th·ªùi gian:</strong> {direction.timeline}
                    </div>
                  </motion.div>
                ))}
              </div>
            </ContentCard>
          </motion.div>

          {(() => {
            try {
              const visited = JSON.parse(localStorage.getItem('visited-steps') || '[]');
              const totalSteps = 7;
              if (visited.length >= totalSteps && [...Array(totalSteps).keys()].every(i => visited.includes(i))) {
                return (
                  <motion.div
                    initial={{ opacity: 0, y: 30 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.8, delay: 1.2 }}
                    className="mb-16"
                  >
                    <Quiz
                      questions={practicalQuiz}
                      title="Quiz: Th·ª±c ti·ªÖn t√¥n gi√°o t·∫°i Vi·ªát Nam"
                    />
                  </motion.div>
                );
              }
            } catch { }
            return null;
          })()}

          {/* Note Taking Section */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 1.4 }}
            className="mb-16"
          >
            <NoteTaking
              pageId="practical"
              pageTitle="Th·ª±c ti·ªÖn t√¥n gi√°o t·∫°i Vi·ªát Nam"
            />
          </motion.div>

          {/* Next Steps */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 1.6 }}
            className="text-center"
          >
            <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-12 text-white">
              <h2 className="text-3xl font-bold mb-4">
                Ti·∫øp t·ª•c h·ªçc t·∫≠p
              </h2>
              <p className="text-xl mb-8 opacity-90">
                B√¢y gi·ªù h√£y t√¨m hi·ªÉu v·ªÅ c√°c gi·∫£i ph√°p c·ª• th·ªÉ trong giai ƒëo·∫°n hi·ªán nay
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <a
                  href="/solutions"
                  className="inline-flex items-center px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg hover:bg-gray-100 transition-colors"
                >
                  <FiTarget className="mr-2" size={20} />
                  Gi·∫£i ph√°p hi·ªán t·∫°i
                </a>
                <a
                  href="/conclusion"
                  className="inline-flex items-center px-8 py-4 bg-transparent border-2 border-white text-white font-semibold rounded-lg hover:bg-white hover:text-blue-600 transition-colors"
                >
                  K·∫øt lu·∫≠n
                </a>
              </div>
            </div>
          </motion.div>
        </div>
      </div>
    </div>
  );
};

export default PracticalApplication;
