import React from 'react';
import { motion } from 'framer-motion';
import ContentCard from '../components/Content/ContentCard';
import QuoteBox from '../components/Content/QuoteBox';
import StatisticsChart from '../components/Content/StatisticsChart';
import Quiz from '../components/Interactive/Quiz';
import NoteTaking from '../components/Interactive/NoteTaking';
import MainContentSidebar from '../components/Layout/MainContentSidebar';
import { contentData } from '../data/content';
import { quizData } from '../data/quiz';
import { FiCheckCircle, FiTarget, FiUsers, FiBookOpen, FiAward, FiTrendingUp } from 'react-icons/fi';

const Conclusion = () => {
  const data = contentData.ketLuan;

  // All quiz questions for final assessment
  const finalQuiz = quizData;

  // Chart data for learning progress
  const learningProgressData = {
    labels: ['Quan ƒëi·ªÉm M√°c-L√™nin', 'T√¥n gi√°o trong XHCN', 'Ch√≠nh s√°ch VN', 'Th·ª±c ti·ªÖn VN', 'Gi·∫£i ph√°p'],
    datasets: [
      {
        label: 'M·ª©c ƒë·ªô hi·ªÉu bi·∫øt (%)',
        data: [95, 90, 88, 85, 92],
        backgroundColor: [
          'rgba(59, 130, 246, 0.8)',
          'rgba(16, 185, 129, 0.8)',
          'rgba(245, 158, 11, 0.8)',
          'rgba(239, 68, 68, 0.8)',
          'rgba(139, 92, 246, 0.8)'
        ],
        borderColor: [
          'rgba(59, 130, 246, 1)',
          'rgba(16, 185, 129, 1)',
          'rgba(245, 158, 11, 1)',
          'rgba(239, 68, 68, 1)',
          'rgba(139, 92, 246, 1)'
        ],
        borderWidth: 2
      }
    ]
  };

  const keyLearnings = [
    {
      topic: "B·∫£n ch·∫•t t√¥n gi√°o theo M√°c-L√™nin",
      keyPoints: [
        "T√¥n gi√°o l√† s·∫£n ph·∫©m x√£ h·ªôi, kh√¥ng ph·∫£i hi·ªán t∆∞·ª£ng si√™u nhi√™n",
        "Ph·∫£n √°nh h∆∞ ·∫£o hi·ªán th·ª±c kh√°ch quan",
        "V·ª´a c√≥ m·∫∑t t√≠ch c·ª±c v·ª´a c√≥ m·∫∑t ti√™u c·ª±c",
        "C·∫ßn ƒë∆∞·ª£c x·ª≠ l√Ω b·∫±ng ph∆∞∆°ng ph√°p khoa h·ªçc"
      ],
      icon: FiBookOpen,
      color: "bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300"
    },
    {
      topic: "T√¥n gi√°o trong x√£ h·ªôi ch·ªß nghƒ©a",
      keyPoints: [
        "T√¥n gi√°o v·∫´n t·ªìn t·∫°i l√¢u d√†i trong th·ªùi k·ª≥ qu√° ƒë·ªô",
        "Kh√¥ng d√πng b·∫°o l·ª±c ƒë·ªÉ x√≥a b·ªè t√¥n gi√°o",
        "T√¥n tr·ªçng quy·ªÅn t·ª± do t√≠n ng∆∞·ª°ng",
        "X√¢y d·ª±ng c∆° s·ªü x√£ h·ªôi m·ªõi ƒë·ªÉ gi·∫£m nhu c·∫ßu t√¥n gi√°o"
      ],
      icon: FiUsers,
      color: "bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300"
    },
    {
      topic: "Ch√≠nh s√°ch t√¥n gi√°o Vi·ªát Nam",
      keyPoints: [
        "B·∫£o ƒë·∫£m t·ª± do t√≠n ng∆∞·ª°ng theo Hi·∫øn ph√°p 2013",
        "B√¨nh ƒë·∫≥ng tr∆∞·ªõc ph√°p lu·∫≠t",
        "B·∫£o ƒë·∫£m ho·∫°t ƒë·ªông h·ª£p ph√°p",
        "NgƒÉn ch·∫∑n l·ª£i d·ª•ng t√¥n gi√°o"
      ],
      icon: FiTarget,
      color: "bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-300"
    },
    {
      topic: "Th·ª±c ti·ªÖn v√† gi·∫£i ph√°p",
      keyPoints: [
        "H√≤a h·ª£p t√¥n gi√°o ƒë·∫°t ƒë∆∞·ª£c nhi·ªÅu th√†nh t·ª±u",
        "C·∫ßn ti·∫øp t·ª•c ho√†n thi·ªán ph√°p lu·∫≠t",
        "Ph√°t huy vai tr√≤ t√≠ch c·ª±c c·ªßa t√¥n gi√°o",
        "ƒê·∫•u tranh v·ªõi h√†nh vi l·ª£i d·ª•ng t√¥n gi√°o"
      ],
      icon: FiTrendingUp,
      color: "bg-orange-100 dark:bg-orange-900 text-orange-700 dark:text-orange-300"
    }
  ];

  const mainConclusions = [
    {
      conclusion: "T√¥n tr·ªçng quy·ªÅn t·ª± do t√≠n ng∆∞·ª°ng v√† kh√¥ng t√≠n ng∆∞·ª°ng",
      explanation: "ƒê√¢y l√† nguy√™n t·∫Øc c∆° b·∫£n trong x·ª≠ l√Ω v·∫•n ƒë·ªÅ t√¥n gi√°o, ƒë∆∞·ª£c quy ƒë·ªãnh trong Hi·∫øn ph√°p v√† ph√°p lu·∫≠t Vi·ªát Nam.",
      importance: "Cao nh·∫•t"
    },
    {
      conclusion: "ƒêo√†n k·∫øt to√†n d√¢n, ph√°t huy s·ª©c m·∫°nh c·ªông ƒë·ªìng",
      explanation: "T·∫°o ra s·ª± ƒë·ªìng thu·∫≠n trong x√£ h·ªôi, ph√°t huy s·ª©c m·∫°nh ƒëo√†n k·∫øt d√¢n t·ªôc ƒë·ªÉ x√¢y d·ª±ng ƒë·∫•t n∆∞·ªõc.",
      importance: "Cao"
    },
    {
      conclusion: "Ph√°t huy gi√° tr·ªã t·ªët ƒë·∫πp c·ªßa t√¥n gi√°o, ƒë·∫•u tranh v·ªõi l·ª£i d·ª•ng",
      explanation: "Khuy·∫øn kh√≠ch c√°c ho·∫°t ƒë·ªông t√≠ch c·ª±c c·ªßa t√¥n gi√°o ƒë·ªìng th·ªùi ngƒÉn ch·∫∑n c√°c h√†nh vi l·ª£i d·ª•ng ƒë·ªÉ ph√° ho·∫°i.",
      importance: "Cao"
    }
  ];

  const practicalApplications = [
    {
      area: "Trong c√¥ng t√°c qu·∫£n l√Ω nh√† n∆∞·ªõc",
      applications: [
        "X√¢y d·ª±ng ch√≠nh s√°ch t√¥n gi√°o ph√π h·ª£p",
        "TƒÉng c∆∞·ªùng qu·∫£n l√Ω ho·∫°t ƒë·ªông t√¥n gi√°o",
        "ƒê√†o t·∫°o c√°n b·ªô l√†m c√¥ng t√°c t√¥n gi√°o",
        "Ph·ªëi h·ª£p v·ªõi c√°c t·ªï ch·ª©c t√¥n gi√°o"
      ]
    },
    {
      area: "Trong gi√°o d·ª•c v√† tuy√™n truy·ªÅn",
      applications: [
        "Gi√°o d·ª•c quy·ªÅn t·ª± do t√≠n ng∆∞·ª°ng",
        "Tuy√™n truy·ªÅn gi√° tr·ªã nh√¢n vƒÉn c·ªßa t√¥n gi√°o",
        "N√¢ng cao hi·ªÉu bi·∫øt v·ªÅ ph√°p lu·∫≠t",
        "X√¢y d·ª±ng vƒÉn h√≥a t√¥n tr·ªçng s·ª± kh√°c bi·ªát"
      ]
    },
    {
      area: "Trong ƒë·ªùi s·ªëng x√£ h·ªôi",
      applications: [
        "Tham gia c√°c ho·∫°t ƒë·ªông t·ª´ thi·ªán",
        "B·∫£o v·ªá m√¥i tr∆∞·ªùng",
        "H·ªó tr·ª£ ph√°t tri·ªÉn c·ªông ƒë·ªìng",
        "G√≥p ph·∫ßn ·ªïn ƒë·ªãnh x√£ h·ªôi"
      ]
    }
  ];

  const futureProspects = [
    {
      prospect: "Ho√†n thi·ªán ph√°p lu·∫≠t",
      description: "Ti·∫øp t·ª•c s·ª≠a ƒë·ªïi, b·ªï sung c√°c vƒÉn b·∫£n ph√°p lu·∫≠t v·ªÅ t√¥n gi√°o",
      timeline: "2024-2026",
      priority: "Cao"
    },
    {
      prospect: "N√¢ng cao nh·∫≠n th·ª©c",
      description: "TƒÉng c∆∞·ªùng gi√°o d·ª•c v√† tuy√™n truy·ªÅn v·ªÅ quy·ªÅn t·ª± do t√≠n ng∆∞·ª°ng",
      timeline: "2024-2030",
      priority: "Cao"
    },
    {
      prospect: "Ph√°t huy vai tr√≤ t√≠ch c·ª±c",
      description: "Khuy·∫øn kh√≠ch t√¥n gi√°o tham gia c√°c ho·∫°t ƒë·ªông x√£ h·ªôi",
      timeline: "2025-2030",
      priority: "Trung b√¨nh"
    },
    {
      prospect: "TƒÉng c∆∞·ªùng h·ª£p t√°c qu·ªëc t·∫ø",
      description: "H·ª£p t√°c v·ªõi c√°c n∆∞·ªõc trong x·ª≠ l√Ω v·∫•n ƒë·ªÅ t√¥n gi√°o",
      timeline: "2024-2030",
      priority: "Trung b√¨nh"
    }
  ];

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex">
      {/* Fixed Sidebar */}
      <div className="hidden lg:block w-80 bg-white dark:bg-gray-800 shadow-lg fixed left-0 top-0 h-screen overflow-y-auto z-10">
        <div className="p-6 pb-20">
          <MainContentSidebar
            title="N·ªôi dung ch∆∞∆°ng"
            showProgress={false}
            showStats={false}
          />
        </div>
      </div>

      {/* Main Content Area */}
      <div className="flex-1 lg:ml-80">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
          {/* Header */}
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center mb-12"
          >
            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6">
              {data.title}
            </h1>
            <p className="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto leading-relaxed">
              T·ªïng k·∫øt v√† k·∫øt lu·∫≠n v·ªÅ m√¥n h·ªçc "B·∫£n ch·∫•t t√¥n gi√°o theo quan ƒëi·ªÉm M√°c ‚Äì L√™nin"
            </p>
          </motion.div>

          {/* Main Conclusions */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="mb-16"
          >
            <ContentCard
              title="Nh·ªØng k·∫øt lu·∫≠n ch√≠nh"
              icon="‚úÖ"
              pageId="conclusion-main"
              image={data.image}
              imageCaption={data.imageCaption}
            >
              <div className="space-y-6">
                {mainConclusions.map((conclusion, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: index * 0.1 }}
                    className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm"
                  >
                    <div className="flex items-start justify-between mb-3">
                      <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                        {conclusion.conclusion}
                      </h3>
                      <span className={`text-xs px-2 py-1 rounded ${conclusion.importance === 'Cao nh·∫•t' ? 'bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300' :
                        conclusion.importance === 'Cao' ? 'bg-orange-100 dark:bg-orange-900 text-orange-700 dark:text-orange-300' :
                          'bg-yellow-100 dark:bg-yellow-900 text-yellow-700 dark:text-yellow-300'
                        }`}>
                        {conclusion.importance}
                      </span>
                    </div>
                    <p className="text-gray-700 dark:text-gray-300">
                      {conclusion.explanation}
                    </p>
                  </motion.div>
                ))}
              </div>
            </ContentCard>
          </motion.div>

          {/* Key Learnings */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="mb-16"
          >
            <ContentCard
              title="Nh·ªØng ki·∫øn th·ª©c quan tr·ªçng ƒë√£ h·ªçc"
              icon="üìö"
              pageId="conclusion-learnings"
            >
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {keyLearnings.map((learning, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: 0.4 + (index * 0.1) }}
                    className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm"
                  >
                    <div className="flex items-start space-x-4 mb-4">
                      <div className={`w-12 h-12 ${learning.color} rounded-lg flex items-center justify-center flex-shrink-0`}>
                        <learning.icon size={24} />
                      </div>
                      <div className="flex-1">
                        <h3 className="font-semibold text-gray-900 dark:text-white mb-2">
                          {learning.topic}
                        </h3>
                      </div>
                    </div>

                    <div className="space-y-2">
                      {learning.keyPoints.map((point, pointIndex) => (
                        <div key={pointIndex} className="flex items-start">
                          <span className="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                          <span className="text-sm text-gray-700 dark:text-gray-300">{point}</span>
                        </div>
                      ))}
                    </div>
                  </motion.div>
                ))}
              </div>
            </ContentCard>
          </motion.div>

          {/* Learning Progress Chart */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.4 }}
            className="mb-16"
          >
            <ContentCard
              title="Ti·∫øn ƒë·ªô h·ªçc t·∫≠p"
              icon="üìà"
              pageId="conclusion-progress"
            >
              <StatisticsChart
                data={learningProgressData}
                type="bar"
                title="M·ª©c ƒë·ªô hi·ªÉu bi·∫øt c√°c ch·ªß ƒë·ªÅ"
                delay={0.6}
              />
            </ContentCard>
          </motion.div>

          {/* Practical Applications */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.6 }}
            className="mb-16"
          >
            <ContentCard
              title="·ª®ng d·ª•ng th·ª±c ti·ªÖn"
              icon="üéØ"
              pageId="conclusion-applications"
            >
              <div className="space-y-6">
                {practicalApplications.map((application, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: 0.8 + (index * 0.1) }}
                    className="bg-gray-50 dark:bg-gray-700 rounded-lg p-6"
                  >
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                      {application.area}
                    </h3>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {application.applications.map((app, appIndex) => (
                        <div key={appIndex} className="flex items-start">
                          <span className="w-2 h-2 bg-green-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                          <span className="text-sm text-gray-700 dark:text-gray-300">{app}</span>
                        </div>
                      ))}
                    </div>
                  </motion.div>
                ))}
              </div>
            </ContentCard>
          </motion.div>

          {/* Future Prospects */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.8 }}
            className="mb-16"
          >
            <ContentCard
              title="Tri·ªÉn v·ªçng t∆∞∆°ng lai"
              icon="üöÄ"
              pageId="conclusion-future"
            >
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {futureProspects.map((prospect, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: 1.0 + (index * 0.1) }}
                    className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm"
                  >
                    <div className="flex items-start justify-between mb-3">
                      <h3 className="font-semibold text-gray-900 dark:text-white">
                        {prospect.prospect}
                      </h3>
                      <div className="flex items-center space-x-2">
                        <span className={`text-xs px-2 py-1 rounded ${prospect.priority === 'Cao' ? 'bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300' :
                          prospect.priority === 'Trung b√¨nh' ? 'bg-yellow-100 dark:bg-yellow-900 text-yellow-700 dark:text-yellow-300' :
                            'bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300'
                          }`}>
                          {prospect.priority}
                        </span>
                      </div>
                    </div>
                    <p className="text-gray-700 dark:text-gray-300 mb-3">
                      {prospect.description}
                    </p>
                    <div className="text-sm text-gray-500 dark:text-gray-400">
                      <strong>Th·ªùi gian:</strong> {prospect.timeline}
                    </div>
                  </motion.div>
                ))}
              </div>
            </ContentCard>
          </motion.div>

          {/* Significance */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 1.0 }}
            className="mb-16"
          >
            <QuoteBox
              quote={data.significance}
              variant="success"
            />
          </motion.div>

          {/* Final Quiz */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 1.2 }}
            className="mb-16"
          >
            <Quiz
              questions={finalQuiz}
              title="Quiz t·ªïng h·ª£p: Ki·ªÉm tra ki·∫øn th·ª©c to√†n b·ªô m√¥n h·ªçc"
            />
          </motion.div>

          {/* Note Taking Section */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 1.4 }}
            className="mb-16"
          >
            <NoteTaking
              pageId="conclusion"
              pageTitle="K·∫øt lu·∫≠n m√¥n h·ªçc"
            />
          </motion.div>

          {/* Final Message */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 1.6 }}
            className="text-center"
          >
            <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-12 text-white">
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ delay: 1.8, type: "spring", stiffness: 200 }}
                className="text-6xl mb-6"
              >
                üéì
              </motion.div>
              <h2 className="text-4xl font-bold mb-4">
                Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh m√¥n h·ªçc!
              </h2>
              <p className="text-xl mb-8 opacity-90">
                B·∫°n ƒë√£ n·∫Øm v·ªØng ki·∫øn th·ª©c v·ªÅ "B·∫£n ch·∫•t t√¥n gi√°o theo quan ƒëi·ªÉm M√°c ‚Äì L√™nin"
                v√† c√≥ th·ªÉ √°p d·ª•ng v√†o th·ª±c ti·ªÖn c√¥ng vi·ªác v√† cu·ªôc s·ªëng.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <a
                  href="/"
                  className="inline-flex items-center px-8 py-4 bg-white text-blue-600 font-semibold rounded-lg hover:bg-gray-100 transition-colors"
                >
                  <FiAward className="mr-2" size={20} />
                  V·ªÅ trang ch·ªß
                </a>
                <a
                  href="/introduction"
                  className="inline-flex items-center px-8 py-4 bg-transparent border-2 border-white text-white font-semibold rounded-lg hover:bg-white hover:text-blue-600 transition-colors"
                >
                  <FiBookOpen className="mr-2" size={20} />
                  √în t·∫≠p l·∫°i
                </a>
              </div>
            </div>
          </motion.div>
        </div>
      </div>
    </div>
  );
};

export default Conclusion;
